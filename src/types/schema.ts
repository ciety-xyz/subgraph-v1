// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("event_selectors", Value.fromStringArray(new Array(0)));
    this.set("block_number", Value.fromI32(0));
    this.set("timestamp", Value.fromI32(0));
    this.set("from", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("gas_price", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get event_selectors(): Array<string> {
    let value = this.get("event_selectors");
    return value!.toStringArray();
  }

  set event_selectors(value: Array<string>) {
    this.set("event_selectors", Value.fromStringArray(value));
  }

  get block_number(): i32 {
    let value = this.get("block_number");
    return value!.toI32();
  }

  set block_number(value: i32) {
    this.set("block_number", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(<string>value));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get gas_price(): BigInt {
    let value = this.get("gas_price");
    return value!.toBigInt();
  }

  set gas_price(value: BigInt) {
    this.set("gas_price", Value.fromBigInt(value));
  }
}

export class Contract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("block_number", Value.fromI32(0));
    this.set("transaction", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("topic", Value.fromString(""));
    this.set("is_removed", Value.fromBoolean(false));
    this.set("is_owner_changed", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Contract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Contract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Contract", id.toString(), this);
    }
  }

  static load(id: string): Contract | null {
    return changetype<Contract | null>(store.get("Contract", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block_number(): i32 {
    let value = this.get("block_number");
    return value!.toI32();
  }

  set block_number(value: i32) {
    this.set("block_number", Value.fromI32(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get topic(): string {
    let value = this.get("topic");
    return value!.toString();
  }

  set topic(value: string) {
    this.set("topic", Value.fromString(value));
  }

  get is_removed(): boolean {
    let value = this.get("is_removed");
    return value!.toBoolean();
  }

  set is_removed(value: boolean) {
    this.set("is_removed", Value.fromBoolean(value));
  }

  get is_revealed(): boolean {
    let value = this.get("is_revealed");
    return value!.toBoolean();
  }

  set is_revealed(value: boolean) {
    this.set("is_revealed", Value.fromBoolean(value));
  }

  get is_owner_changed(): boolean {
    let value = this.get("is_owner_changed");
    return value!.toBoolean();
  }

  set is_owner_changed(value: boolean) {
    this.set("is_owner_changed", Value.fromBoolean(value));
  }

  get max_supply(): i32 {
    let value = this.get("max_supply");
    return value!.toI32();
  }

  set max_supply(value: i32) {
    this.set("max_supply", Value.fromI32(value));
  }

  get total_minted_amount(): i32 {
    let value = this.get("total_minted_amount");
    return value!.toI32();
  }

  set total_minted_amount(value: i32) {
    this.set("total_minted_amount", Value.fromI32(value));
  }

  get cover_uri(): string | null {
    let value = this.get("cover_uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cover_uri(value: string | null) {
    if (!value) {
      this.unset("cover_uri");
    } else {
      this.set("cover_uri", Value.fromString(<string>value));
    }
  }

  get reveal_url(): string | null {
    let value = this.get("reveal_url");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reveal_url(value: string | null) {
    if (!value) {
      this.unset("reveal_url");
    } else {
      this.set("reveal_url", Value.fromString(<string>value));
    }
  }

  get collection_id(): string | null {
    let value = this.get("collection_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collection_id(value: string | null) {
    if (!value) {
      this.unset("collection_id");
    } else {
      this.set("collection_id", Value.fromString(<string>value));
    }
  }
}

export class ContractRole extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("block_number", Value.fromI32(0));
    this.set("transaction", Value.fromString(""));
    this.set("role", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContractRole entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContractRole must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContractRole", id.toString(), this);
    }
  }

  static load(id: string): ContractRole | null {
    return changetype<ContractRole | null>(store.get("ContractRole", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block_number(): i32 {
    let value = this.get("block_number");
    return value!.toI32();
  }

  set block_number(value: i32) {
    this.set("block_number", Value.fromI32(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get contract(): string | null {
    let value = this.get("contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contract(value: string | null) {
    if (!value) {
      this.unset("contract");
    } else {
      this.set("contract", Value.fromString(<string>value));
    }
  }

  get role(): Array<string> {
    let value = this.get("role");
    return value!.toStringArray();
  }

  set role(value: Array<string>) {
    this.set("role", Value.fromStringArray(value));
  }
}

export class Payment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("block_number", Value.fromI32(0));
    this.set("sender", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Payment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Payment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Payment", id.toString(), this);
    }
  }

  static load(id: string): Payment | null {
    return changetype<Payment | null>(store.get("Payment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block_number(): i32 {
    let value = this.get("block_number");
    return value!.toI32();
  }

  set block_number(value: i32) {
    this.set("block_number", Value.fromI32(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get topic(): string | null {
    let value = this.get("topic");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set topic(value: string | null) {
    if (!value) {
      this.unset("topic");
    } else {
      this.set("topic", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }
}

export class Nft extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("block_number", Value.fromI32(0));
    this.set("transaction", Value.fromString(""));
    this.set("nft_contract", Value.fromString(""));
    this.set("token_id", Value.fromString(""));
    this.set("owners", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Nft entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Nft must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Nft", id.toString(), this);
    }
  }

  static load(id: string): Nft | null {
    return changetype<Nft | null>(store.get("Nft", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block_number(): i32 {
    let value = this.get("block_number");
    return value!.toI32();
  }

  set block_number(value: i32) {
    this.set("block_number", Value.fromI32(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get nft_contract(): string {
    let value = this.get("nft_contract");
    return value!.toString();
  }

  set nft_contract(value: string) {
    this.set("nft_contract", Value.fromString(value));
  }

  get token_id(): string {
    let value = this.get("token_id");
    return value!.toString();
  }

  set token_id(value: string) {
    this.set("token_id", Value.fromString(value));
  }

  get minter(): string | null {
    let value = this.get("minter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set minter(value: string | null) {
    if (!value) {
      this.unset("minter");
    } else {
      this.set("minter", Value.fromString(<string>value));
    }
  }

  get owners(): Array<string> {
    let value = this.get("owners");
    return value!.toStringArray();
  }

  set owners(value: Array<string>) {
    this.set("owners", Value.fromStringArray(value));
  }
}

export class Minter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("block_number", Value.fromI32(0));
    this.set("minter_address", Value.fromString(""));
    this.set("mintAmount", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Minter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Minter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Minter", id.toString(), this);
    }
  }

  static load(id: string): Minter | null {
    return changetype<Minter | null>(store.get("Minter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block_number(): i32 {
    let value = this.get("block_number");
    return value!.toI32();
  }

  set block_number(value: i32) {
    this.set("block_number", Value.fromI32(value));
  }

  get minter_address(): string {
    let value = this.get("minter_address");
    return value!.toString();
  }

  set minter_address(value: string) {
    this.set("minter_address", Value.fromString(value));
  }

  get nfts(): Array<string> | null {
    let value = this.get("nfts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nfts(value: Array<string> | null) {
    if (!value) {
      this.unset("nfts");
    } else {
      this.set("nfts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get mintAmount(): i32 {
    let value = this.get("mintAmount");
    return value!.toI32();
  }

  set mintAmount(value: i32) {
    this.set("mintAmount", Value.fromI32(value));
  }
}
