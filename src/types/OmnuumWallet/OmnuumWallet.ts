// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approved extends ethereum.Event {
  get params(): Approved__Params {
    return new Approved__Params(this);
  }
}

export class Approved__Params {
  _event: Approved;

  constructor(event: Approved) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get votes(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Canceled extends ethereum.Event {
  get params(): Canceled__Params {
    return new Canceled__Params(this);
  }
}

export class Canceled__Params {
  _event: Canceled;

  constructor(event: Canceled) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EtherReceived extends ethereum.Event {
  get params(): EtherReceived__Params {
    return new EtherReceived__Params(this);
  }
}

export class EtherReceived__Params {
  _event: EtherReceived;

  constructor(event: EtherReceived) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Executed extends ethereum.Event {
  get params(): Executed__Params {
    return new Executed__Params(this);
  }
}

export class Executed__Params {
  _event: Executed;

  constructor(event: Executed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get requestType(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class PaymentReceived extends ethereum.Event {
  get params(): PaymentReceived__Params {
    return new PaymentReceived__Params(this);
  }
}

export class PaymentReceived__Params {
  _event: PaymentReceived;

  constructor(event: PaymentReceived) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get topic(): string {
    return this._event.parameters[1].value.toString();
  }

  get description(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Requested extends ethereum.Event {
  get params(): Requested__Params {
    return new Requested__Params(this);
  }
}

export class Requested__Params {
  _event: Requested;

  constructor(event: Requested) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get requestType(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Revoked extends ethereum.Event {
  get params(): Revoked__Params {
    return new Revoked__Params(this);
  }
}

export class Revoked__Params {
  _event: Revoked;

  constructor(event: Revoked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get votes(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class OmnuumWallet__requestsResultCurrentOwnerStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get vote(): i32 {
    return this[1].toI32();
  }
}

export class OmnuumWallet__requestsResultNewOwnerStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get vote(): i32 {
    return this[1].toI32();
  }
}

export class OmnuumWallet__requestsResult {
  value0: Address;
  value1: i32;
  value2: OmnuumWallet__requestsResultCurrentOwnerStruct;
  value3: OmnuumWallet__requestsResultNewOwnerStruct;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: Address,
    value1: i32,
    value2: OmnuumWallet__requestsResultCurrentOwnerStruct,
    value3: OmnuumWallet__requestsResultNewOwnerStruct,
    value4: BigInt,
    value5: BigInt,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromTuple(this.value2));
    map.set("value3", ethereum.Value.fromTuple(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }
}

export class OmnuumWallet extends ethereum.SmartContract {
  static bind(address: Address): OmnuumWallet {
    return new OmnuumWallet("OmnuumWallet", address);
  }

  consensusRatio(): BigInt {
    let result = super.call("consensusRatio", "consensusRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_consensusRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "consensusRatio",
      "consensusRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastRequestNo(): BigInt {
    let result = super.call(
      "getLastRequestNo",
      "getLastRequestNo():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastRequestNo(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastRequestNo",
      "getLastRequestNo():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRequestIdsByExecution(_isExecuted: boolean): Array<BigInt> {
    let result = super.call(
      "getRequestIdsByExecution",
      "getRequestIdsByExecution(bool):(uint256[])",
      [ethereum.Value.fromBoolean(_isExecuted)]
    );

    return result[0].toBigIntArray();
  }

  try_getRequestIdsByExecution(
    _isExecuted: boolean
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getRequestIdsByExecution",
      "getRequestIdsByExecution(bool):(uint256[])",
      [ethereum.Value.fromBoolean(_isExecuted)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRequestIdsByOwner(_owner: Address, _isExecuted: boolean): Array<BigInt> {
    let result = super.call(
      "getRequestIdsByOwner",
      "getRequestIdsByOwner(address,bool):(uint256[])",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromBoolean(_isExecuted)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getRequestIdsByOwner(
    _owner: Address,
    _isExecuted: boolean
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getRequestIdsByOwner",
      "getRequestIdsByOwner(address,bool):(uint256[])",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromBoolean(_isExecuted)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRequestIdsByType(_requestType: i32, _isExecuted: boolean): Array<BigInt> {
    let result = super.call(
      "getRequestIdsByType",
      "getRequestIdsByType(uint8,bool):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_requestType)),
        ethereum.Value.fromBoolean(_isExecuted)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getRequestIdsByType(
    _requestType: i32,
    _isExecuted: boolean
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getRequestIdsByType",
      "getRequestIdsByType(uint8,bool):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_requestType)),
        ethereum.Value.fromBoolean(_isExecuted)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isOwner(_owner: Address): boolean {
    let result = super.call("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBoolean();
  }

  try_isOwner(_owner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwnerVoted(_owner: Address, _reqId: BigInt): boolean {
    let result = super.call(
      "isOwnerVoted",
      "isOwnerVoted(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_reqId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isOwnerVoted(
    _owner: Address,
    _reqId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOwnerVoted",
      "isOwnerVoted(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_reqId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minLimitForConsensus(): i32 {
    let result = super.call(
      "minLimitForConsensus",
      "minLimitForConsensus():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_minLimitForConsensus(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "minLimitForConsensus",
      "minLimitForConsensus():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  ownerCounter(param0: i32): i32 {
    let result = super.call("ownerCounter", "ownerCounter(uint8):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toI32();
  }

  try_ownerCounter(param0: i32): ethereum.CallResult<i32> {
    let result = super.tryCall("ownerCounter", "ownerCounter(uint8):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  ownerVote(param0: Address): i32 {
    let result = super.call("ownerVote", "ownerVote(address):(uint8)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toI32();
  }

  try_ownerVote(param0: Address): ethereum.CallResult<i32> {
    let result = super.tryCall("ownerVote", "ownerVote(address):(uint8)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  requests(param0: BigInt): OmnuumWallet__requestsResult {
    let result = super.call(
      "requests",
      "requests(uint256):(address,uint8,(address,uint8),(address,uint8),uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OmnuumWallet__requestsResult(
      result[0].toAddress(),
      result[1].toI32(),
      changetype<OmnuumWallet__requestsResultCurrentOwnerStruct>(
        result[2].toTuple()
      ),
      changetype<OmnuumWallet__requestsResultNewOwnerStruct>(
        result[3].toTuple()
      ),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean()
    );
  }

  try_requests(
    param0: BigInt
  ): ethereum.CallResult<OmnuumWallet__requestsResult> {
    let result = super.tryCall(
      "requests",
      "requests(uint256):(address,uint8,(address,uint8),(address,uint8),uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OmnuumWallet__requestsResult(
        value[0].toAddress(),
        value[1].toI32(),
        changetype<OmnuumWallet__requestsResultCurrentOwnerStruct>(
          value[2].toTuple()
        ),
        changetype<OmnuumWallet__requestsResultNewOwnerStruct>(
          value[3].toTuple()
        ),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean()
      )
    );
  }

  requiredVotesForConsensus(): BigInt {
    let result = super.call(
      "requiredVotesForConsensus",
      "requiredVotesForConsensus():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_requiredVotesForConsensus(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requiredVotesForConsensus",
      "requiredVotesForConsensus():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalVotes(): BigInt {
    let result = super.call("totalVotes", "totalVotes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalVotes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalVotes", "totalVotes():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _consensusRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minLimitForConsensus(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _initialOwnerAccounts(): Array<
    ConstructorCall_initialOwnerAccountsStruct
  > {
    return this._call.inputValues[2].value.toTupleArray<
      ConstructorCall_initialOwnerAccountsStruct
    >();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_initialOwnerAccountsStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get vote(): i32 {
    return this[1].toI32();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _reqId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get _reqId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get _reqId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class MakePaymentCall extends ethereum.Call {
  get inputs(): MakePaymentCall__Inputs {
    return new MakePaymentCall__Inputs(this);
  }

  get outputs(): MakePaymentCall__Outputs {
    return new MakePaymentCall__Outputs(this);
  }
}

export class MakePaymentCall__Inputs {
  _call: MakePaymentCall;

  constructor(call: MakePaymentCall) {
    this._call = call;
  }

  get _topic(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class MakePaymentCall__Outputs {
  _call: MakePaymentCall;

  constructor(call: MakePaymentCall) {
    this._call = call;
  }
}

export class RequestCall extends ethereum.Call {
  get inputs(): RequestCall__Inputs {
    return new RequestCall__Inputs(this);
  }

  get outputs(): RequestCall__Outputs {
    return new RequestCall__Outputs(this);
  }
}

export class RequestCall__Inputs {
  _call: RequestCall;

  constructor(call: RequestCall) {
    this._call = call;
  }

  get _requestType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _currentAccount(): RequestCall_currentAccountStruct {
    return changetype<RequestCall_currentAccountStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get _newAccount(): RequestCall_newAccountStruct {
    return changetype<RequestCall_newAccountStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get _withdrawalAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RequestCall__Outputs {
  _call: RequestCall;

  constructor(call: RequestCall) {
    this._call = call;
  }
}

export class RequestCall_currentAccountStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get vote(): i32 {
    return this[1].toI32();
  }
}

export class RequestCall_newAccountStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get vote(): i32 {
    return this[1].toI32();
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get _reqId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}
