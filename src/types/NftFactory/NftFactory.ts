// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NftContractDeployed extends ethereum.Event {
  get params(): NftContractDeployed__Params {
    return new NftContractDeployed__Params(this);
  }
}

export class NftContractDeployed__Params {
  _event: NftContractDeployed;

  constructor(event: NftContractDeployed) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collectionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NftFactory extends ethereum.SmartContract {
  static bind(address: Address): NftFactory {
    return new NftFactory("NftFactory", address);
  }

  caManager(): Address {
    let result = super.call("caManager", "caManager():(address)", []);

    return result[0].toAddress();
  }

  try_caManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("caManager", "caManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nftContractBeacon(): Address {
    let result = super.call(
      "nftContractBeacon",
      "nftContractBeacon():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_nftContractBeacon(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nftContractBeacon",
      "nftContractBeacon():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  omnuumSigner(): Address {
    let result = super.call("omnuumSigner", "omnuumSigner():(address)", []);

    return result[0].toAddress();
  }

  try_omnuumSigner(): ethereum.CallResult<Address> {
    let result = super.tryCall("omnuumSigner", "omnuumSigner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _caManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftContractBeacon(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _omnuumSigner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeOmnuumSignerCall extends ethereum.Call {
  get inputs(): ChangeOmnuumSignerCall__Inputs {
    return new ChangeOmnuumSignerCall__Inputs(this);
  }

  get outputs(): ChangeOmnuumSignerCall__Outputs {
    return new ChangeOmnuumSignerCall__Outputs(this);
  }
}

export class ChangeOmnuumSignerCall__Inputs {
  _call: ChangeOmnuumSignerCall;

  constructor(call: ChangeOmnuumSignerCall) {
    this._call = call;
  }

  get _newSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOmnuumSignerCall__Outputs {
  _call: ChangeOmnuumSignerCall;

  constructor(call: ChangeOmnuumSignerCall) {
    this._call = call;
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get _maxSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _coverUri(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _collectionId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _payload(): DeployCall_payloadStruct {
    return changetype<DeployCall_payloadStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }
}

export class DeployCall_payloadStruct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get topic(): string {
    return this[1].toString();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
